# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\mitch\Documents\PycharmProjects\github\sample_tools\tools\UI\smp_to_ds.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_smp_to_ds_ui(object):
    def setupUi(self, smp_to_ds_ui):
        smp_to_ds_ui.setObjectName("smp_to_ds_ui")
        smp_to_ds_ui.resize(800, 776)
        smp_to_ds_ui.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.centralwidget = QtWidgets.QWidget(smp_to_ds_ui)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.directory_lyt = QtWidgets.QHBoxLayout()
        self.directory_lyt.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.directory_lyt.setObjectName("directory_lyt")
        self.path_l = QtWidgets.QLabel(self.centralwidget)
        self.path_l.setStyleSheet("QLabel{color: rgb(30, 161, 205);}")
        self.path_l.setAlignment(QtCore.Qt.AlignCenter)
        self.path_l.setObjectName("path_l")
        self.directory_lyt.addWidget(self.path_l)
        self.setpath_tb = QtWidgets.QToolButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.setpath_tb.setFont(font)
        self.setpath_tb.setObjectName("setpath_tb")
        self.directory_lyt.addWidget(self.setpath_tb)
        self.verticalLayout.addLayout(self.directory_lyt)
        self.sample_title_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sample_title_l.sizePolicy().hasHeightForWidth())
        self.sample_title_l.setSizePolicy(sizePolicy)
        self.sample_title_l.setMinimumSize(QtCore.QSize(64, 0))
        self.sample_title_l.setStyleSheet("background-color: rgb(63, 95, 127);\n"
"color: rgb(255, 255, 255);")
        self.sample_title_l.setObjectName("sample_title_l")
        self.verticalLayout.addWidget(self.sample_title_l)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.pattern_lyt = QtWidgets.QHBoxLayout()
        self.pattern_lyt.setObjectName("pattern_lyt")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.pattern_lyt.addItem(spacerItem1)
        self.pattern_pb = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pattern_pb.setFont(font)
        self.pattern_pb.setObjectName("pattern_pb")
        self.pattern_lyt.addWidget(self.pattern_pb)
        self.pattern_le = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pattern_le.sizePolicy().hasHeightForWidth())
        self.pattern_le.setSizePolicy(sizePolicy)
        self.pattern_le.setMinimumSize(QtCore.QSize(192, 0))
        self.pattern_le.setText("")
        self.pattern_le.setFrame(False)
        self.pattern_le.setAlignment(QtCore.Qt.AlignCenter)
        self.pattern_le.setObjectName("pattern_le")
        self.pattern_lyt.addWidget(self.pattern_le)
        self.grpnaming_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.grpnaming_l.sizePolicy().hasHeightForWidth())
        self.grpnaming_l.setSizePolicy(sizePolicy)
        self.grpnaming_l.setObjectName("grpnaming_l")
        self.pattern_lyt.addWidget(self.grpnaming_l)
        self.groupnaming_cmb = QtWidgets.QComboBox(self.centralwidget)
        self.groupnaming_cmb.setFrame(False)
        self.groupnaming_cmb.setObjectName("groupnaming_cmb")
        self.groupnaming_cmb.addItem("")
        self.groupnaming_cmb.addItem("")
        self.groupnaming_cmb.addItem("")
        self.groupnaming_cmb.addItem("")
        self.groupnaming_cmb.addItem("")
        self.pattern_lyt.addWidget(self.groupnaming_cmb)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.pattern_lyt.addItem(spacerItem2)
        self.override_cb = QtWidgets.QCheckBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.override_cb.sizePolicy().hasHeightForWidth())
        self.override_cb.setSizePolicy(sizePolicy)
        self.override_cb.setObjectName("override_cb")
        self.pattern_lyt.addWidget(self.override_cb)
        self.loop_cb = QtWidgets.QCheckBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.loop_cb.sizePolicy().hasHeightForWidth())
        self.loop_cb.setSizePolicy(sizePolicy)
        self.loop_cb.setChecked(True)
        self.loop_cb.setObjectName("loop_cb")
        self.pattern_lyt.addWidget(self.loop_cb)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.pattern_lyt.addItem(spacerItem3)
        self.verticalLayout.addLayout(self.pattern_lyt)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem4)
        self.env_title_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.env_title_l.sizePolicy().hasHeightForWidth())
        self.env_title_l.setSizePolicy(sizePolicy)
        self.env_title_l.setMinimumSize(QtCore.QSize(64, 0))
        self.env_title_l.setStyleSheet("background-color: rgb(63, 95, 127);\n"
"color: rgb(255, 255, 255);")
        self.env_title_l.setObjectName("env_title_l")
        self.verticalLayout.addWidget(self.env_title_l)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem5)
        self.adsr_lyt = QtWidgets.QHBoxLayout()
        self.adsr_lyt.setObjectName("adsr_lyt")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.adsr_lyt.addItem(spacerItem6)
        self.ADSR_pb = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ADSR_pb.setFont(font)
        self.ADSR_pb.setObjectName("ADSR_pb")
        self.adsr_lyt.addWidget(self.ADSR_pb)
        self.A_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.A_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.A_dsb.setFrame(False)
        self.A_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.A_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.A_dsb.setDecimals(3)
        self.A_dsb.setMaximum(100.0)
        self.A_dsb.setSingleStep(0.01)
        self.A_dsb.setProperty("value", 0.001)
        self.A_dsb.setObjectName("A_dsb")
        self.adsr_lyt.addWidget(self.A_dsb)
        self.D_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.D_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.D_dsb.setFrame(False)
        self.D_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.D_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.D_dsb.setDecimals(3)
        self.D_dsb.setMaximum(100.0)
        self.D_dsb.setSingleStep(0.01)
        self.D_dsb.setProperty("value", 0.375)
        self.D_dsb.setObjectName("D_dsb")
        self.adsr_lyt.addWidget(self.D_dsb)
        self.S_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.S_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.S_dsb.setFrame(False)
        self.S_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.S_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.S_dsb.setDecimals(3)
        self.S_dsb.setMaximum(100.0)
        self.S_dsb.setSingleStep(0.01)
        self.S_dsb.setProperty("value", 1.0)
        self.S_dsb.setObjectName("S_dsb")
        self.adsr_lyt.addWidget(self.S_dsb)
        self.R_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.R_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.R_dsb.setFrame(False)
        self.R_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.R_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.R_dsb.setDecimals(3)
        self.R_dsb.setMaximum(100.0)
        self.R_dsb.setSingleStep(0.01)
        self.R_dsb.setProperty("value", 0.375)
        self.R_dsb.setObjectName("R_dsb")
        self.adsr_lyt.addWidget(self.R_dsb)
        spacerItem7 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.adsr_lyt.addItem(spacerItem7)
        self.ADRr_pb = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.ADRr_pb.setFont(font)
        self.ADRr_pb.setObjectName("ADRr_pb")
        self.adsr_lyt.addWidget(self.ADRr_pb)
        self.Ar_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.Ar_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.Ar_dsb.setFrame(False)
        self.Ar_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.Ar_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.Ar_dsb.setDecimals(2)
        self.Ar_dsb.setMinimum(-100.0)
        self.Ar_dsb.setMaximum(100.0)
        self.Ar_dsb.setSingleStep(1.0)
        self.Ar_dsb.setProperty("value", -100.0)
        self.Ar_dsb.setObjectName("Ar_dsb")
        self.adsr_lyt.addWidget(self.Ar_dsb)
        self.Dr_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.Dr_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.Dr_dsb.setFrame(False)
        self.Dr_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.Dr_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.Dr_dsb.setDecimals(2)
        self.Dr_dsb.setMinimum(-100.0)
        self.Dr_dsb.setMaximum(100.0)
        self.Dr_dsb.setSingleStep(1.0)
        self.Dr_dsb.setProperty("value", 100.0)
        self.Dr_dsb.setObjectName("Dr_dsb")
        self.adsr_lyt.addWidget(self.Dr_dsb)
        self.Rr_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.Rr_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.Rr_dsb.setFrame(False)
        self.Rr_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.Rr_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.Rr_dsb.setDecimals(2)
        self.Rr_dsb.setMinimum(-100.0)
        self.Rr_dsb.setMaximum(100.0)
        self.Rr_dsb.setSingleStep(1.0)
        self.Rr_dsb.setProperty("value", 100.0)
        self.Rr_dsb.setObjectName("Rr_dsb")
        self.adsr_lyt.addWidget(self.Rr_dsb)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.adsr_lyt.addItem(spacerItem8)
        self.verticalLayout.addLayout(self.adsr_lyt)
        spacerItem9 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem9)
        self.fake_trigger_title_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fake_trigger_title_l.sizePolicy().hasHeightForWidth())
        self.fake_trigger_title_l.setSizePolicy(sizePolicy)
        self.fake_trigger_title_l.setMinimumSize(QtCore.QSize(64, 0))
        self.fake_trigger_title_l.setStyleSheet("background-color: rgb(63, 95, 127);\n"
"color: rgb(255, 255, 255);")
        self.fake_trigger_title_l.setObjectName("fake_trigger_title_l")
        self.verticalLayout.addWidget(self.fake_trigger_title_l)
        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem10)
        self.fake_leg_lyt = QtWidgets.QHBoxLayout()
        self.fake_leg_lyt.setObjectName("fake_leg_lyt")
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.fake_leg_lyt.addItem(spacerItem11)
        self.fake_leg_cb = QtWidgets.QCheckBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fake_leg_cb.sizePolicy().hasHeightForWidth())
        self.fake_leg_cb.setSizePolicy(sizePolicy)
        self.fake_leg_cb.setObjectName("fake_leg_cb")
        self.fake_leg_lyt.addWidget(self.fake_leg_cb)
        self.fake_leg_wid = QtWidgets.QWidget(self.centralwidget)
        self.fake_leg_wid.setEnabled(False)
        self.fake_leg_wid.setObjectName("fake_leg_wid")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.fake_leg_wid)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem12)
        self.fk_leg_start_l = QtWidgets.QLabel(self.fake_leg_wid)
        self.fk_leg_start_l.setObjectName("fk_leg_start_l")
        self.horizontalLayout_4.addWidget(self.fk_leg_start_l)
        self.fk_leg_start_dsb = QtWidgets.QDoubleSpinBox(self.fake_leg_wid)
        self.fk_leg_start_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_leg_start_dsb.setFrame(False)
        self.fk_leg_start_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_leg_start_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_leg_start_dsb.setDecimals(3)
        self.fk_leg_start_dsb.setMaximum(100.0)
        self.fk_leg_start_dsb.setSingleStep(0.01)
        self.fk_leg_start_dsb.setProperty("value", 0.1)
        self.fk_leg_start_dsb.setObjectName("fk_leg_start_dsb")
        self.horizontalLayout_4.addWidget(self.fk_leg_start_dsb)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem13)
        self.fk_leg_a_l = QtWidgets.QLabel(self.fake_leg_wid)
        self.fk_leg_a_l.setObjectName("fk_leg_a_l")
        self.horizontalLayout_4.addWidget(self.fk_leg_a_l)
        self.fk_leg_a_dsb = QtWidgets.QDoubleSpinBox(self.fake_leg_wid)
        self.fk_leg_a_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_leg_a_dsb.setFrame(False)
        self.fk_leg_a_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_leg_a_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_leg_a_dsb.setDecimals(3)
        self.fk_leg_a_dsb.setMaximum(100.0)
        self.fk_leg_a_dsb.setSingleStep(0.01)
        self.fk_leg_a_dsb.setProperty("value", 0.1)
        self.fk_leg_a_dsb.setObjectName("fk_leg_a_dsb")
        self.horizontalLayout_4.addWidget(self.fk_leg_a_dsb)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem14)
        self.fk_leg_a_curve_l = QtWidgets.QLabel(self.fake_leg_wid)
        self.fk_leg_a_curve_l.setObjectName("fk_leg_a_curve_l")
        self.horizontalLayout_4.addWidget(self.fk_leg_a_curve_l)
        self.fk_leg_a_curve_dsb = QtWidgets.QDoubleSpinBox(self.fake_leg_wid)
        self.fk_leg_a_curve_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_leg_a_curve_dsb.setFrame(False)
        self.fk_leg_a_curve_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_leg_a_curve_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_leg_a_curve_dsb.setDecimals(2)
        self.fk_leg_a_curve_dsb.setMinimum(-100.0)
        self.fk_leg_a_curve_dsb.setMaximum(100.0)
        self.fk_leg_a_curve_dsb.setSingleStep(1.0)
        self.fk_leg_a_curve_dsb.setProperty("value", -100.0)
        self.fk_leg_a_curve_dsb.setObjectName("fk_leg_a_curve_dsb")
        self.horizontalLayout_4.addWidget(self.fk_leg_a_curve_dsb)
        spacerItem15 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem15)
        self.fake_leg_lyt.addWidget(self.fake_leg_wid)
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.fake_leg_lyt.addItem(spacerItem16)
        self.verticalLayout.addLayout(self.fake_leg_lyt)
        self.fake_rls_lyt = QtWidgets.QHBoxLayout()
        self.fake_rls_lyt.setObjectName("fake_rls_lyt")
        spacerItem17 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.fake_rls_lyt.addItem(spacerItem17)
        self.fake_rls_cb = QtWidgets.QCheckBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fake_rls_cb.sizePolicy().hasHeightForWidth())
        self.fake_rls_cb.setSizePolicy(sizePolicy)
        self.fake_rls_cb.setObjectName("fake_rls_cb")
        self.fake_rls_lyt.addWidget(self.fake_rls_cb)
        self.fake_options_wid = QtWidgets.QWidget(self.centralwidget)
        self.fake_options_wid.setEnabled(False)
        self.fake_options_wid.setObjectName("fake_options_wid")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.fake_options_wid)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem18 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem18)
        self.fk_rls_mode_l = QtWidgets.QLabel(self.fake_options_wid)
        self.fk_rls_mode_l.setObjectName("fk_rls_mode_l")
        self.horizontalLayout_2.addWidget(self.fk_rls_mode_l)
        self.fk_rls_mode_cmb = QtWidgets.QComboBox(self.fake_options_wid)
        self.fk_rls_mode_cmb.setFrame(False)
        self.fk_rls_mode_cmb.setObjectName("fk_rls_mode_cmb")
        self.fk_rls_mode_cmb.addItem("")
        self.fk_rls_mode_cmb.addItem("")
        self.fk_rls_mode_cmb.addItem("")
        self.horizontalLayout_2.addWidget(self.fk_rls_mode_cmb)
        spacerItem19 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem19)
        self.fk_volume_l = QtWidgets.QLabel(self.fake_options_wid)
        self.fk_volume_l.setObjectName("fk_volume_l")
        self.horizontalLayout_2.addWidget(self.fk_volume_l)
        self.fk_volume_dsb = QtWidgets.QDoubleSpinBox(self.fake_options_wid)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fk_volume_dsb.sizePolicy().hasHeightForWidth())
        self.fk_volume_dsb.setSizePolicy(sizePolicy)
        self.fk_volume_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.fk_volume_dsb.setFrame(False)
        self.fk_volume_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_volume_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_volume_dsb.setDecimals(3)
        self.fk_volume_dsb.setMinimum(-96.0)
        self.fk_volume_dsb.setMaximum(0.0)
        self.fk_volume_dsb.setProperty("value", -15.0)
        self.fk_volume_dsb.setObjectName("fk_volume_dsb")
        self.horizontalLayout_2.addWidget(self.fk_volume_dsb)
        spacerItem20 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem20)
        self.fk_rls_tweaks_wid = QtWidgets.QWidget(self.fake_options_wid)
        self.fk_rls_tweaks_wid.setObjectName("fk_rls_tweaks_wid")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.fk_rls_tweaks_wid)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.fk_tuning_l = QtWidgets.QLabel(self.fk_rls_tweaks_wid)
        self.fk_tuning_l.setObjectName("fk_tuning_l")
        self.horizontalLayout_5.addWidget(self.fk_tuning_l)
        self.fk_tuning_dsb = QtWidgets.QDoubleSpinBox(self.fk_rls_tweaks_wid)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fk_tuning_dsb.sizePolicy().hasHeightForWidth())
        self.fk_tuning_dsb.setSizePolicy(sizePolicy)
        self.fk_tuning_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.fk_tuning_dsb.setFrame(False)
        self.fk_tuning_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_tuning_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_tuning_dsb.setDecimals(3)
        self.fk_tuning_dsb.setMinimum(-48.0)
        self.fk_tuning_dsb.setMaximum(48.0)
        self.fk_tuning_dsb.setProperty("value", 0.0)
        self.fk_tuning_dsb.setObjectName("fk_tuning_dsb")
        self.horizontalLayout_5.addWidget(self.fk_tuning_dsb)
        spacerItem21 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem21)
        self.fk_cutoff_l = QtWidgets.QLabel(self.fk_rls_tweaks_wid)
        self.fk_cutoff_l.setObjectName("fk_cutoff_l")
        self.horizontalLayout_5.addWidget(self.fk_cutoff_l)
        self.fk_cutoff_dsb = QtWidgets.QDoubleSpinBox(self.fk_rls_tweaks_wid)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fk_cutoff_dsb.sizePolicy().hasHeightForWidth())
        self.fk_cutoff_dsb.setSizePolicy(sizePolicy)
        self.fk_cutoff_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.fk_cutoff_dsb.setFrame(False)
        self.fk_cutoff_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_cutoff_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_cutoff_dsb.setDecimals(0)
        self.fk_cutoff_dsb.setMinimum(0.0)
        self.fk_cutoff_dsb.setMaximum(22000.0)
        self.fk_cutoff_dsb.setProperty("value", 1000.0)
        self.fk_cutoff_dsb.setObjectName("fk_cutoff_dsb")
        self.horizontalLayout_5.addWidget(self.fk_cutoff_dsb)
        self.horizontalLayout_2.addWidget(self.fk_rls_tweaks_wid)
        self.fake_rls_lyt.addWidget(self.fake_options_wid)
        spacerItem22 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.fake_rls_lyt.addItem(spacerItem22)
        self.verticalLayout.addLayout(self.fake_rls_lyt)
        self.fk_adsr_wid = QtWidgets.QWidget(self.centralwidget)
        self.fk_adsr_wid.setEnabled(False)
        self.fk_adsr_wid.setObjectName("fk_adsr_wid")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.fk_adsr_wid)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem23 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem23)
        self.fk_ADSR_pb = QtWidgets.QPushButton(self.fk_adsr_wid)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.fk_ADSR_pb.setFont(font)
        self.fk_ADSR_pb.setObjectName("fk_ADSR_pb")
        self.horizontalLayout_3.addWidget(self.fk_ADSR_pb)
        self.fk_A_dsb = QtWidgets.QDoubleSpinBox(self.fk_adsr_wid)
        self.fk_A_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_A_dsb.setFrame(False)
        self.fk_A_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_A_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_A_dsb.setDecimals(3)
        self.fk_A_dsb.setMaximum(100.0)
        self.fk_A_dsb.setSingleStep(0.01)
        self.fk_A_dsb.setProperty("value", 0.001)
        self.fk_A_dsb.setObjectName("fk_A_dsb")
        self.horizontalLayout_3.addWidget(self.fk_A_dsb)
        self.fk_D_dsb = QtWidgets.QDoubleSpinBox(self.fk_adsr_wid)
        self.fk_D_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_D_dsb.setFrame(False)
        self.fk_D_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_D_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_D_dsb.setDecimals(3)
        self.fk_D_dsb.setMaximum(100.0)
        self.fk_D_dsb.setSingleStep(0.01)
        self.fk_D_dsb.setProperty("value", 0.05)
        self.fk_D_dsb.setObjectName("fk_D_dsb")
        self.horizontalLayout_3.addWidget(self.fk_D_dsb)
        self.fk_S_dsb = QtWidgets.QDoubleSpinBox(self.fk_adsr_wid)
        self.fk_S_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_S_dsb.setFrame(False)
        self.fk_S_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_S_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_S_dsb.setDecimals(3)
        self.fk_S_dsb.setMaximum(100.0)
        self.fk_S_dsb.setSingleStep(0.01)
        self.fk_S_dsb.setProperty("value", 0.0)
        self.fk_S_dsb.setObjectName("fk_S_dsb")
        self.horizontalLayout_3.addWidget(self.fk_S_dsb)
        self.fk_R_dsb = QtWidgets.QDoubleSpinBox(self.fk_adsr_wid)
        self.fk_R_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_R_dsb.setFrame(False)
        self.fk_R_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_R_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_R_dsb.setDecimals(3)
        self.fk_R_dsb.setMaximum(100.0)
        self.fk_R_dsb.setSingleStep(0.01)
        self.fk_R_dsb.setProperty("value", 0.05)
        self.fk_R_dsb.setObjectName("fk_R_dsb")
        self.horizontalLayout_3.addWidget(self.fk_R_dsb)
        spacerItem24 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem24)
        self.fk_ADRr_pb = QtWidgets.QPushButton(self.fk_adsr_wid)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.fk_ADRr_pb.setFont(font)
        self.fk_ADRr_pb.setObjectName("fk_ADRr_pb")
        self.horizontalLayout_3.addWidget(self.fk_ADRr_pb)
        self.fk_Ar_dsb = QtWidgets.QDoubleSpinBox(self.fk_adsr_wid)
        self.fk_Ar_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_Ar_dsb.setFrame(False)
        self.fk_Ar_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_Ar_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_Ar_dsb.setDecimals(2)
        self.fk_Ar_dsb.setMinimum(-100.0)
        self.fk_Ar_dsb.setMaximum(100.0)
        self.fk_Ar_dsb.setSingleStep(1.0)
        self.fk_Ar_dsb.setProperty("value", -100.0)
        self.fk_Ar_dsb.setObjectName("fk_Ar_dsb")
        self.horizontalLayout_3.addWidget(self.fk_Ar_dsb)
        self.fk_Dr_dsb = QtWidgets.QDoubleSpinBox(self.fk_adsr_wid)
        self.fk_Dr_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_Dr_dsb.setFrame(False)
        self.fk_Dr_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_Dr_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_Dr_dsb.setDecimals(2)
        self.fk_Dr_dsb.setMinimum(-100.0)
        self.fk_Dr_dsb.setMaximum(100.0)
        self.fk_Dr_dsb.setSingleStep(1.0)
        self.fk_Dr_dsb.setProperty("value", 100.0)
        self.fk_Dr_dsb.setObjectName("fk_Dr_dsb")
        self.horizontalLayout_3.addWidget(self.fk_Dr_dsb)
        self.fk_Rr_dsb = QtWidgets.QDoubleSpinBox(self.fk_adsr_wid)
        self.fk_Rr_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.fk_Rr_dsb.setFrame(False)
        self.fk_Rr_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.fk_Rr_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.fk_Rr_dsb.setDecimals(2)
        self.fk_Rr_dsb.setMinimum(-100.0)
        self.fk_Rr_dsb.setMaximum(100.0)
        self.fk_Rr_dsb.setSingleStep(1.0)
        self.fk_Rr_dsb.setProperty("value", 100.0)
        self.fk_Rr_dsb.setObjectName("fk_Rr_dsb")
        self.horizontalLayout_3.addWidget(self.fk_Rr_dsb)
        spacerItem25 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem25)
        self.verticalLayout.addWidget(self.fk_adsr_wid)
        spacerItem26 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem26)
        self.mapping_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mapping_l.sizePolicy().hasHeightForWidth())
        self.mapping_l.setSizePolicy(sizePolicy)
        self.mapping_l.setMinimumSize(QtCore.QSize(64, 0))
        self.mapping_l.setStyleSheet("background-color: rgb(63, 95, 127);\n"
"color: rgb(255, 255, 255);")
        self.mapping_l.setObjectName("mapping_l")
        self.verticalLayout.addWidget(self.mapping_l)
        spacerItem27 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem27)
        self.spread_seq_lyt = QtWidgets.QHBoxLayout()
        self.spread_seq_lyt.setObjectName("spread_seq_lyt")
        spacerItem28 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spread_seq_lyt.addItem(spacerItem28)
        self.notespread_l = QtWidgets.QLabel(self.centralwidget)
        self.notespread_l.setObjectName("notespread_l")
        self.spread_seq_lyt.addWidget(self.notespread_l)
        self.spread_cmb = QtWidgets.QComboBox(self.centralwidget)
        self.spread_cmb.setFrame(False)
        self.spread_cmb.setObjectName("spread_cmb")
        self.spread_cmb.addItem("")
        self.spread_cmb.addItem("")
        self.spread_cmb.addItem("")
        self.spread_cmb.addItem("")
        self.spread_seq_lyt.addWidget(self.spread_cmb)
        spacerItem29 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spread_seq_lyt.addItem(spacerItem29)
        self.pad_vel_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.pad_vel_cb.setObjectName("pad_vel_cb")
        self.spread_seq_lyt.addWidget(self.pad_vel_cb)
        spacerItem30 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spread_seq_lyt.addItem(spacerItem30)
        self.seqmode_l = QtWidgets.QLabel(self.centralwidget)
        self.seqmode_l.setObjectName("seqmode_l")
        self.spread_seq_lyt.addWidget(self.seqmode_l)
        self.seq_mode_cmb = QtWidgets.QComboBox(self.centralwidget)
        self.seq_mode_cmb.setFrame(False)
        self.seq_mode_cmb.setObjectName("seq_mode_cmb")
        self.seq_mode_cmb.addItem("")
        self.seq_mode_cmb.addItem("")
        self.seq_mode_cmb.addItem("")
        self.seq_mode_cmb.addItem("")
        self.spread_seq_lyt.addWidget(self.seq_mode_cmb)
        spacerItem31 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.spread_seq_lyt.addItem(spacerItem31)
        self.verticalLayout.addLayout(self.spread_seq_lyt)
        self.mapping_lyt = QtWidgets.QHBoxLayout()
        self.mapping_lyt.setObjectName("mapping_lyt")
        spacerItem32 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.mapping_lyt.addItem(spacerItem32)
        self.limit_pb = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.limit_pb.setFont(font)
        self.limit_pb.setObjectName("limit_pb")
        self.mapping_lyt.addWidget(self.limit_pb)
        self.limit_le = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.limit_le.sizePolicy().hasHeightForWidth())
        self.limit_le.setSizePolicy(sizePolicy)
        self.limit_le.setText("")
        self.limit_le.setFrame(False)
        self.limit_le.setAlignment(QtCore.Qt.AlignCenter)
        self.limit_le.setObjectName("limit_le")
        self.mapping_lyt.addWidget(self.limit_le)
        self.note_limit_cmb = QtWidgets.QComboBox(self.centralwidget)
        self.note_limit_cmb.setFrame(False)
        self.note_limit_cmb.setObjectName("note_limit_cmb")
        self.note_limit_cmb.addItem("")
        self.note_limit_cmb.addItem("")
        self.mapping_lyt.addWidget(self.note_limit_cmb)
        spacerItem33 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.mapping_lyt.addItem(spacerItem33)
        self.fake_rr_pb = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.fake_rr_pb.setFont(font)
        self.fake_rr_pb.setObjectName("fake_rr_pb")
        self.mapping_lyt.addWidget(self.fake_rr_pb)
        self.rrofs_le = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rrofs_le.sizePolicy().hasHeightForWidth())
        self.rrofs_le.setSizePolicy(sizePolicy)
        self.rrofs_le.setText("")
        self.rrofs_le.setFrame(False)
        self.rrofs_le.setAlignment(QtCore.Qt.AlignCenter)
        self.rrofs_le.setObjectName("rrofs_le")
        self.mapping_lyt.addWidget(self.rrofs_le)
        self.rr_bounds_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.rr_bounds_cb.setChecked(True)
        self.rr_bounds_cb.setObjectName("rr_bounds_cb")
        self.mapping_lyt.addWidget(self.rr_bounds_cb)
        spacerItem34 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.mapping_lyt.addItem(spacerItem34)
        self.verticalLayout.addLayout(self.mapping_lyt)
        self.transpose_lyt = QtWidgets.QHBoxLayout()
        self.transpose_lyt.setObjectName("transpose_lyt")
        spacerItem35 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.transpose_lyt.addItem(spacerItem35)
        self.transpose_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.transpose_l.sizePolicy().hasHeightForWidth())
        self.transpose_l.setSizePolicy(sizePolicy)
        self.transpose_l.setObjectName("transpose_l")
        self.transpose_lyt.addWidget(self.transpose_l)
        self.transpose_sb = QtWidgets.QSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.transpose_sb.sizePolicy().hasHeightForWidth())
        self.transpose_sb.setSizePolicy(sizePolicy)
        self.transpose_sb.setMinimumSize(QtCore.QSize(64, 0))
        self.transpose_sb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.transpose_sb.setFrame(False)
        self.transpose_sb.setAlignment(QtCore.Qt.AlignCenter)
        self.transpose_sb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.transpose_sb.setMinimum(-64)
        self.transpose_sb.setMaximum(64)
        self.transpose_sb.setObjectName("transpose_sb")
        self.transpose_lyt.addWidget(self.transpose_sb)
        spacerItem36 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.transpose_lyt.addItem(spacerItem36)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pf_mode_l = QtWidgets.QLabel(self.centralwidget)
        self.pf_mode_l.setObjectName("pf_mode_l")
        self.horizontalLayout.addWidget(self.pf_mode_l)
        self.pf_mode_cmb = QtWidgets.QComboBox(self.centralwidget)
        self.pf_mode_cmb.setFrame(False)
        self.pf_mode_cmb.setObjectName("pf_mode_cmb")
        self.pf_mode_cmb.addItem("")
        self.pf_mode_cmb.addItem("")
        self.pf_mode_cmb.addItem("")
        self.pf_mode_cmb.addItem("")
        self.pf_mode_cmb.addItem("")
        self.pf_mode_cmb.addItem("")
        self.pf_mode_cmb.addItem("")
        self.pf_mode_cmb.addItem("")
        self.horizontalLayout.addWidget(self.pf_mode_cmb)
        self.pf_th_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.pf_th_dsb.setEnabled(False)
        self.pf_th_dsb.setFrame(False)
        self.pf_th_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.pf_th_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.pf_th_dsb.setDecimals(3)
        self.pf_th_dsb.setMaximum(100.0)
        self.pf_th_dsb.setProperty("value", 5.0)
        self.pf_th_dsb.setObjectName("pf_th_dsb")
        self.horizontalLayout.addWidget(self.pf_th_dsb)
        self.transpose_lyt.addLayout(self.horizontalLayout)
        spacerItem37 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.transpose_lyt.addItem(spacerItem37)
        self.tuning_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tuning_l.sizePolicy().hasHeightForWidth())
        self.tuning_l.setSizePolicy(sizePolicy)
        self.tuning_l.setObjectName("tuning_l")
        self.transpose_lyt.addWidget(self.tuning_l)
        self.tuning_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tuning_dsb.sizePolicy().hasHeightForWidth())
        self.tuning_dsb.setSizePolicy(sizePolicy)
        self.tuning_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.tuning_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.tuning_dsb.setFrame(False)
        self.tuning_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.tuning_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.tuning_dsb.setDecimals(3)
        self.tuning_dsb.setMinimum(-1.0)
        self.tuning_dsb.setMaximum(1.0)
        self.tuning_dsb.setSingleStep(0.01)
        self.tuning_dsb.setObjectName("tuning_dsb")
        self.transpose_lyt.addWidget(self.tuning_dsb)
        spacerItem38 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.transpose_lyt.addItem(spacerItem38)
        self.verticalLayout.addLayout(self.transpose_lyt)
        spacerItem39 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem39)
        self.other_title_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.other_title_l.sizePolicy().hasHeightForWidth())
        self.other_title_l.setSizePolicy(sizePolicy)
        self.other_title_l.setMinimumSize(QtCore.QSize(64, 0))
        self.other_title_l.setStyleSheet("background-color: rgb(63, 95, 127);\n"
"color: rgb(255, 255, 255);")
        self.other_title_l.setObjectName("other_title_l")
        self.verticalLayout.addWidget(self.other_title_l)
        spacerItem40 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem40)
        self.options_lyt = QtWidgets.QHBoxLayout()
        self.options_lyt.setObjectName("options_lyt")
        spacerItem41 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.options_lyt.addItem(spacerItem41)
        self.attenuation_l = QtWidgets.QLabel(self.centralwidget)
        self.attenuation_l.setObjectName("attenuation_l")
        self.options_lyt.addWidget(self.attenuation_l)
        self.attenuation_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attenuation_dsb.sizePolicy().hasHeightForWidth())
        self.attenuation_dsb.setSizePolicy(sizePolicy)
        self.attenuation_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.attenuation_dsb.setFrame(False)
        self.attenuation_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.attenuation_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.attenuation_dsb.setDecimals(3)
        self.attenuation_dsb.setMinimum(-12.0)
        self.attenuation_dsb.setMaximum(0.0)
        self.attenuation_dsb.setSingleStep(1.0)
        self.attenuation_dsb.setProperty("value", -6.0)
        self.attenuation_dsb.setObjectName("attenuation_dsb")
        self.options_lyt.addWidget(self.attenuation_dsb)
        spacerItem42 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.options_lyt.addItem(spacerItem42)
        self.veltrk_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.veltrk_l.sizePolicy().hasHeightForWidth())
        self.veltrk_l.setSizePolicy(sizePolicy)
        self.veltrk_l.setObjectName("veltrk_l")
        self.options_lyt.addWidget(self.veltrk_l)
        self.ampveltrk_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ampveltrk_dsb.sizePolicy().hasHeightForWidth())
        self.ampveltrk_dsb.setSizePolicy(sizePolicy)
        self.ampveltrk_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.ampveltrk_dsb.setFrame(False)
        self.ampveltrk_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.ampveltrk_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.ampveltrk_dsb.setDecimals(3)
        self.ampveltrk_dsb.setMinimum(0.0)
        self.ampveltrk_dsb.setMaximum(1.0)
        self.ampveltrk_dsb.setSingleStep(0.1)
        self.ampveltrk_dsb.setProperty("value", 1.0)
        self.ampveltrk_dsb.setObjectName("ampveltrk_dsb")
        self.options_lyt.addWidget(self.ampveltrk_dsb)
        spacerItem43 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.options_lyt.addItem(spacerItem43)
        self.notepan_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.notepan_l.sizePolicy().hasHeightForWidth())
        self.notepan_l.setSizePolicy(sizePolicy)
        self.notepan_l.setObjectName("notepan_l")
        self.options_lyt.addWidget(self.notepan_l)
        self.notepan_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.notepan_dsb.sizePolicy().hasHeightForWidth())
        self.notepan_dsb.setSizePolicy(sizePolicy)
        self.notepan_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.notepan_dsb.setFrame(False)
        self.notepan_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.notepan_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.notepan_dsb.setDecimals(3)
        self.notepan_dsb.setMinimum(-1.0)
        self.notepan_dsb.setMaximum(1.0)
        self.notepan_dsb.setSingleStep(0.1)
        self.notepan_dsb.setProperty("value", 0.0)
        self.notepan_dsb.setObjectName("notepan_dsb")
        self.options_lyt.addWidget(self.notepan_dsb)
        spacerItem44 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.options_lyt.addItem(spacerItem44)
        self.verticalLayout.addLayout(self.options_lyt)
        self.crossfade_lyt = QtWidgets.QHBoxLayout()
        self.crossfade_lyt.setObjectName("crossfade_lyt")
        spacerItem45 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.crossfade_lyt.addItem(spacerItem45)
        self.crossfade_l = QtWidgets.QLabel(self.centralwidget)
        self.crossfade_l.setObjectName("crossfade_l")
        self.crossfade_lyt.addWidget(self.crossfade_l)
        self.crossfade_cmb = QtWidgets.QComboBox(self.centralwidget)
        self.crossfade_cmb.setFrame(False)
        self.crossfade_cmb.setObjectName("crossfade_cmb")
        self.crossfade_cmb.addItem("")
        self.crossfade_cmb.addItem("")
        self.crossfade_cmb.addItem("")
        self.crossfade_lyt.addWidget(self.crossfade_cmb)
        self.crossfade_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.crossfade_dsb.sizePolicy().hasHeightForWidth())
        self.crossfade_dsb.setSizePolicy(sizePolicy)
        self.crossfade_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.crossfade_dsb.setFrame(False)
        self.crossfade_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.crossfade_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.crossfade_dsb.setDecimals(3)
        self.crossfade_dsb.setMinimum(0.0)
        self.crossfade_dsb.setMaximum(1.0)
        self.crossfade_dsb.setSingleStep(0.1)
        self.crossfade_dsb.setProperty("value", 0.05)
        self.crossfade_dsb.setObjectName("crossfade_dsb")
        self.crossfade_lyt.addWidget(self.crossfade_dsb)
        spacerItem46 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.crossfade_lyt.addItem(spacerItem46)
        self.monophonic_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.monophonic_cb.setObjectName("monophonic_cb")
        self.crossfade_lyt.addWidget(self.monophonic_cb)
        spacerItem47 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.crossfade_lyt.addItem(spacerItem47)
        self.verticalLayout.addLayout(self.crossfade_lyt)
        spacerItem48 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem48)
        self.instr_ui_title_l = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.instr_ui_title_l.sizePolicy().hasHeightForWidth())
        self.instr_ui_title_l.setSizePolicy(sizePolicy)
        self.instr_ui_title_l.setMinimumSize(QtCore.QSize(64, 0))
        self.instr_ui_title_l.setStyleSheet("background-color: rgb(63, 95, 127);\n"
"color: rgb(255, 255, 255);")
        self.instr_ui_title_l.setObjectName("instr_ui_title_l")
        self.verticalLayout.addWidget(self.instr_ui_title_l)
        spacerItem49 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem49)
        self.bg_text_lyt = QtWidgets.QHBoxLayout()
        self.bg_text_lyt.setObjectName("bg_text_lyt")
        spacerItem50 = QtWidgets.QSpacerItem(96, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.bg_text_lyt.addItem(spacerItem50)
        self.bg_text_l = QtWidgets.QLabel(self.centralwidget)
        self.bg_text_l.setObjectName("bg_text_l")
        self.bg_text_lyt.addWidget(self.bg_text_l)
        self.bg_text_cmb = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bg_text_cmb.sizePolicy().hasHeightForWidth())
        self.bg_text_cmb.setSizePolicy(sizePolicy)
        self.bg_text_cmb.setFrame(False)
        self.bg_text_cmb.setObjectName("bg_text_cmb")
        self.bg_text_cmb.addItem("")
        self.bg_text_cmb.addItem("")
        self.bg_text_cmb.addItem("")
        self.bg_text_lyt.addWidget(self.bg_text_cmb)
        self.bg_text_le = QtWidgets.QLineEdit(self.centralwidget)
        self.bg_text_le.setEnabled(False)
        self.bg_text_le.setFrame(False)
        self.bg_text_le.setAlignment(QtCore.Qt.AlignCenter)
        self.bg_text_le.setObjectName("bg_text_le")
        self.bg_text_lyt.addWidget(self.bg_text_le)
        spacerItem51 = QtWidgets.QSpacerItem(96, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.bg_text_lyt.addItem(spacerItem51)
        self.verticalLayout.addLayout(self.bg_text_lyt)
        self.palette_lyt = QtWidgets.QHBoxLayout()
        self.palette_lyt.setObjectName("palette_lyt")
        spacerItem52 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.palette_lyt.addItem(spacerItem52)
        self.palette_l = QtWidgets.QLabel(self.centralwidget)
        self.palette_l.setObjectName("palette_l")
        self.palette_lyt.addWidget(self.palette_l)
        self.palette_cmb = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.palette_cmb.sizePolicy().hasHeightForWidth())
        self.palette_cmb.setSizePolicy(sizePolicy)
        self.palette_cmb.setMinimumSize(QtCore.QSize(160, 0))
        self.palette_cmb.setMaximumSize(QtCore.QSize(160, 16777215))
        self.palette_cmb.setFrame(False)
        self.palette_cmb.setObjectName("palette_cmb")
        self.palette_lyt.addWidget(self.palette_cmb)
        spacerItem53 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.palette_lyt.addItem(spacerItem53)
        self.hsv_pb = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.hsv_pb.setFont(font)
        self.hsv_pb.setObjectName("hsv_pb")
        self.palette_lyt.addWidget(self.hsv_pb)
        self.hue_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.hue_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.hue_dsb.setFrame(False)
        self.hue_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.hue_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.hue_dsb.setDecimals(3)
        self.hue_dsb.setMaximum(1.0)
        self.hue_dsb.setSingleStep(0.1)
        self.hue_dsb.setProperty("value", 0.0)
        self.hue_dsb.setObjectName("hue_dsb")
        self.palette_lyt.addWidget(self.hue_dsb)
        self.sat_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.sat_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.sat_dsb.setFrame(False)
        self.sat_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.sat_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.sat_dsb.setDecimals(3)
        self.sat_dsb.setMaximum(2.0)
        self.sat_dsb.setSingleStep(0.1)
        self.sat_dsb.setProperty("value", 1.0)
        self.sat_dsb.setObjectName("sat_dsb")
        self.palette_lyt.addWidget(self.sat_dsb)
        self.val_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.val_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.val_dsb.setFrame(False)
        self.val_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.val_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.val_dsb.setDecimals(3)
        self.val_dsb.setMaximum(2.0)
        self.val_dsb.setSingleStep(0.1)
        self.val_dsb.setProperty("value", 1.0)
        self.val_dsb.setObjectName("val_dsb")
        self.palette_lyt.addWidget(self.val_dsb)
        spacerItem54 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.palette_lyt.addItem(spacerItem54)
        self.verticalLayout.addLayout(self.palette_lyt)
        self.grp_ui_lyt = QtWidgets.QHBoxLayout()
        self.grp_ui_lyt.setObjectName("grp_ui_lyt")
        spacerItem55 = QtWidgets.QSpacerItem(96, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.grp_ui_lyt.addItem(spacerItem55)
        self.grp_knob_rows_l = QtWidgets.QLabel(self.centralwidget)
        self.grp_knob_rows_l.setObjectName("grp_knob_rows_l")
        self.grp_ui_lyt.addWidget(self.grp_knob_rows_l)
        self.grp_knob_rows_sb = QtWidgets.QSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.grp_knob_rows_sb.sizePolicy().hasHeightForWidth())
        self.grp_knob_rows_sb.setSizePolicy(sizePolicy)
        self.grp_knob_rows_sb.setMinimumSize(QtCore.QSize(64, 0))
        self.grp_knob_rows_sb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.grp_knob_rows_sb.setFrame(False)
        self.grp_knob_rows_sb.setAlignment(QtCore.Qt.AlignCenter)
        self.grp_knob_rows_sb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.grp_knob_rows_sb.setMinimum(0)
        self.grp_knob_rows_sb.setMaximum(4)
        self.grp_knob_rows_sb.setProperty("value", 1)
        self.grp_knob_rows_sb.setObjectName("grp_knob_rows_sb")
        self.grp_ui_lyt.addWidget(self.grp_knob_rows_sb)
        self.no_solo_grp_knob_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.no_solo_grp_knob_cb.setChecked(True)
        self.no_solo_grp_knob_cb.setObjectName("no_solo_grp_knob_cb")
        self.grp_ui_lyt.addWidget(self.no_solo_grp_knob_cb)
        spacerItem56 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.grp_ui_lyt.addItem(spacerItem56)
        self.adsr_knobs_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.adsr_knobs_cb.setChecked(True)
        self.adsr_knobs_cb.setObjectName("adsr_knobs_cb")
        self.grp_ui_lyt.addWidget(self.adsr_knobs_cb)
        self.max_adsr_value_l = QtWidgets.QLabel(self.centralwidget)
        self.max_adsr_value_l.setObjectName("max_adsr_value_l")
        self.grp_ui_lyt.addWidget(self.max_adsr_value_l)
        self.max_adsr_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.max_adsr_dsb.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.max_adsr_dsb.setFrame(False)
        self.max_adsr_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.max_adsr_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.max_adsr_dsb.setDecimals(3)
        self.max_adsr_dsb.setMaximum(100.0)
        self.max_adsr_dsb.setSingleStep(0.1)
        self.max_adsr_dsb.setProperty("value", 20.0)
        self.max_adsr_dsb.setObjectName("max_adsr_dsb")
        self.grp_ui_lyt.addWidget(self.max_adsr_dsb)
        spacerItem57 = QtWidgets.QSpacerItem(96, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.grp_ui_lyt.addItem(spacerItem57)
        self.verticalLayout.addLayout(self.grp_ui_lyt)
        self.reverb_lyt = QtWidgets.QHBoxLayout()
        self.reverb_lyt.setObjectName("reverb_lyt")
        spacerItem58 = QtWidgets.QSpacerItem(96, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.reverb_lyt.addItem(spacerItem58)
        self.use_reverb_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.use_reverb_cb.setChecked(True)
        self.use_reverb_cb.setObjectName("use_reverb_cb")
        self.reverb_lyt.addWidget(self.use_reverb_cb)
        self.reverb_wet_dsb = QtWidgets.QDoubleSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.reverb_wet_dsb.sizePolicy().hasHeightForWidth())
        self.reverb_wet_dsb.setSizePolicy(sizePolicy)
        self.reverb_wet_dsb.setMinimumSize(QtCore.QSize(64, 0))
        self.reverb_wet_dsb.setFrame(False)
        self.reverb_wet_dsb.setAlignment(QtCore.Qt.AlignCenter)
        self.reverb_wet_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.reverb_wet_dsb.setDecimals(3)
        self.reverb_wet_dsb.setMinimum(0.0)
        self.reverb_wet_dsb.setMaximum(1.0)
        self.reverb_wet_dsb.setSingleStep(0.1)
        self.reverb_wet_dsb.setProperty("value", 0.2)
        self.reverb_wet_dsb.setObjectName("reverb_wet_dsb")
        self.reverb_lyt.addWidget(self.reverb_wet_dsb)
        self.use_ir_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.use_ir_cb.setObjectName("use_ir_cb")
        self.reverb_lyt.addWidget(self.use_ir_cb)
        spacerItem59 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.reverb_lyt.addItem(spacerItem59)
        self.verticalLayout.addLayout(self.reverb_lyt)
        spacerItem60 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem60)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.create_button_lyt = QtWidgets.QHBoxLayout()
        self.create_button_lyt.setObjectName("create_button_lyt")
        self.dsp_lyt = QtWidgets.QVBoxLayout()
        self.dsp_lyt.setObjectName("dsp_lyt")
        self.suffix_lyt = QtWidgets.QHBoxLayout()
        self.suffix_lyt.setObjectName("suffix_lyt")
        self.add_suffix_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.add_suffix_cb.setObjectName("add_suffix_cb")
        self.suffix_lyt.addWidget(self.add_suffix_cb)
        self.suffix_le = QtWidgets.QLineEdit(self.centralwidget)
        self.suffix_le.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.suffix_le.sizePolicy().hasHeightForWidth())
        self.suffix_le.setSizePolicy(sizePolicy)
        self.suffix_le.setFrame(False)
        self.suffix_le.setObjectName("suffix_le")
        self.suffix_lyt.addWidget(self.suffix_le)
        self.dsp_lyt.addLayout(self.suffix_lyt)
        self.auto_incr_cb = QtWidgets.QCheckBox(self.centralwidget)
        self.auto_incr_cb.setObjectName("auto_incr_cb")
        self.dsp_lyt.addWidget(self.auto_incr_cb)
        self.create_dsp_pb = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.create_dsp_pb.sizePolicy().hasHeightForWidth())
        self.create_dsp_pb.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.create_dsp_pb.setFont(font)
        self.create_dsp_pb.setStyleSheet("QPushButton{color: rgb(0, 0, 0);\n"
"background-color: rgb(128, 220, 213);}")
        self.create_dsp_pb.setObjectName("create_dsp_pb")
        self.dsp_lyt.addWidget(self.create_dsp_pb)
        self.create_button_lyt.addLayout(self.dsp_lyt)
        self.dslib_lyt = QtWidgets.QVBoxLayout()
        self.dslib_lyt.setObjectName("dslib_lyt")
        spacerItem61 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.dslib_lyt.addItem(spacerItem61)
        self.create_dslib_pb = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.create_dslib_pb.sizePolicy().hasHeightForWidth())
        self.create_dslib_pb.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.create_dslib_pb.setFont(font)
        self.create_dslib_pb.setObjectName("create_dslib_pb")
        self.dslib_lyt.addWidget(self.create_dslib_pb)
        self.create_button_lyt.addLayout(self.dslib_lyt)
        self.verticalLayout.addLayout(self.create_button_lyt)
        self.progress_pb = QtWidgets.QProgressBar(self.centralwidget)
        self.progress_pb.setStyleSheet("QProgressBar{border: none;}")
        self.progress_pb.setProperty("value", 0)
        self.progress_pb.setTextVisible(False)
        self.progress_pb.setFormat("")
        self.progress_pb.setObjectName("progress_pb")
        self.verticalLayout.addWidget(self.progress_pb)
        smp_to_ds_ui.setCentralWidget(self.centralwidget)
        self.menu_bar = QtWidgets.QMenuBar(smp_to_ds_ui)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menu_bar.setObjectName("menu_bar")
        self.settings_menu = QtWidgets.QMenu(self.menu_bar)
        self.settings_menu.setObjectName("settings_menu")
        smp_to_ds_ui.setMenuBar(self.menu_bar)
        self.actionSettings = QtWidgets.QAction(smp_to_ds_ui)
        self.actionSettings.setObjectName("actionSettings")
        self.save_settings_a = QtWidgets.QAction(smp_to_ds_ui)
        self.save_settings_a.setObjectName("save_settings_a")
        self.load_settings_a = QtWidgets.QAction(smp_to_ds_ui)
        self.load_settings_a.setObjectName("load_settings_a")
        self.restore_defaults_a = QtWidgets.QAction(smp_to_ds_ui)
        self.restore_defaults_a.setObjectName("restore_defaults_a")
        self.settings_menu.addAction(self.load_settings_a)
        self.settings_menu.addAction(self.save_settings_a)
        self.settings_menu.addSeparator()
        self.settings_menu.addAction(self.restore_defaults_a)
        self.menu_bar.addAction(self.settings_menu.menuAction())

        self.retranslateUi(smp_to_ds_ui)
        self.groupnaming_cmb.setCurrentIndex(1)
        self.spread_cmb.setCurrentIndex(1)
        self.seq_mode_cmb.setCurrentIndex(1)
        self.note_limit_cmb.setCurrentIndex(0)
        self.pf_mode_cmb.setCurrentIndex(0)
        self.crossfade_cmb.setCurrentIndex(1)
        self.bg_text_cmb.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(smp_to_ds_ui)

    def retranslateUi(self, smp_to_ds_ui):
        _translate = QtCore.QCoreApplication.translate
        smp_to_ds_ui.setWindowTitle(_translate("smp_to_ds_ui", "SMP2ds"))
        self.path_l.setToolTip(_translate("smp_to_ds_ui", "Preset ROOT directory path\n"
"\n"
"Samples must be located in a subdirectory called \'Samples\'\n"
"Samples are retrieved recursively so they may be located in subdirectoriesinside \'Samples\'\n"
"\n"
"IR samples must be located in a separate subdirectory called \'IR\'"))
        self.path_l.setText(_translate("smp_to_ds_ui", "Drag and drop a preset ROOT directory on the window"))
        self.setpath_tb.setToolTip(_translate("smp_to_ds_ui", "Browse preset root directory"))
        self.setpath_tb.setText(_translate("smp_to_ds_ui", "..."))
        self.sample_title_l.setText(_translate("smp_to_ds_ui", "Sample info"))
        self.pattern_pb.setToolTip(_translate("smp_to_ds_ui", "Pattern used to convert sample names to attribute values\n"
"Click for context menu and some pattern examples"))
        self.pattern_pb.setText(_translate("smp_to_ds_ui", "Pattern"))
        self.pattern_le.setToolTip(_translate("smp_to_ds_ui", "Pattern used to convert sample names to attribute values\n"
"\n"
"Attribute names must be enclosed with curly braces {}\n"
"Files have to be named accordingly\n"
"\n"
"ID3 tags matching Decent Sampler specifiation are also supported for flac\n"
"when file naming feels impractical"))
        self.grpnaming_l.setText(_translate("smp_to_ds_ui", "Group Naming"))
        self.groupnaming_cmb.setToolTip(_translate("smp_to_ds_ui", "Naming style for group sliders\n"
"\n"
"\'keep\' directly use {group} attribute as is\n"
"\'beautify\' Capitalize the names and insert spaces by detecting CamelCase and digits\n"
"\'lower\' lowercase\n"
"\'upper\' ALL CAPS :)\n"
"\'shorten\' Abreviate the names keeping only first letters by detecting CamelCase and digits"))
        self.groupnaming_cmb.setItemText(0, _translate("smp_to_ds_ui", "keep"))
        self.groupnaming_cmb.setItemText(1, _translate("smp_to_ds_ui", "beautify"))
        self.groupnaming_cmb.setItemText(2, _translate("smp_to_ds_ui", "upper"))
        self.groupnaming_cmb.setItemText(3, _translate("smp_to_ds_ui", "lower"))
        self.groupnaming_cmb.setItemText(4, _translate("smp_to_ds_ui", "shorten"))
        self.override_cb.setToolTip(_translate("smp_to_ds_ui", "Override embedded note metadata with info from sample name\n"
"Ignores per sample tuning/pitch fraction"))
        self.override_cb.setText(_translate("smp_to_ds_ui", "Override"))
        self.loop_cb.setToolTip(_translate("smp_to_ds_ui", "Enable sample loop reading if present (default) or explicitely ignore it"))
        self.loop_cb.setText(_translate("smp_to_ds_ui", "Loop"))
        self.env_title_l.setText(_translate("smp_to_ds_ui", "Envelope"))
        self.ADSR_pb.setToolTip(_translate("smp_to_ds_ui", "ADSR envelope (in s, except sustain)\n"
"Click for context menu"))
        self.ADSR_pb.setText(_translate("smp_to_ds_ui", "ADSR"))
        self.A_dsb.setToolTip(_translate("smp_to_ds_ui", "Attack in s"))
        self.D_dsb.setToolTip(_translate("smp_to_ds_ui", "Decay in s"))
        self.S_dsb.setToolTip(_translate("smp_to_ds_ui", "Sustain amplitude"))
        self.R_dsb.setToolTip(_translate("smp_to_ds_ui", "Release in s"))
        self.ADRr_pb.setToolTip(_translate("smp_to_ds_ui", "ADR Curve (-100 log, 0 lin, 100 exp)\n"
"Click for context menu"))
        self.ADRr_pb.setText(_translate("smp_to_ds_ui", "ADR Release"))
        self.Ar_dsb.setToolTip(_translate("smp_to_ds_ui", "Attack Curve\n"
"(-100 log, 0 lin, 100 exp)"))
        self.Dr_dsb.setToolTip(_translate("smp_to_ds_ui", "Decay Curve\n"
"(-100 log, 0 lin, 100 exp)"))
        self.Rr_dsb.setToolTip(_translate("smp_to_ds_ui", "Release Curve\n"
"(-100 log, 0 lin, 100 exp)"))
        self.fake_trigger_title_l.setText(_translate("smp_to_ds_ui", "Fake Trigger"))
        self.fake_leg_cb.setToolTip(_translate("smp_to_ds_ui", "Create a fake legato trigger by re-using attack samples with a trimmed start and a different attack envelope\n"
"\n"
"Typical result: when playing overlapping notes, the first note will mute and the next note will have its attack cut to blend it with the previous one simulating a legato articulation\n"
"This will make the instrument monophonic and unable to play chords but, it is adequate for a solo part like a melody\n"
"Great for wind or bowed instruments..."))
        self.fake_leg_cb.setText(_translate("smp_to_ds_ui", "Add Fake Legato"))
        self.fk_leg_start_l.setText(_translate("smp_to_ds_ui", "Start"))
        self.fk_leg_start_dsb.setToolTip(_translate("smp_to_ds_ui", "Start of legato samples in s\n"
"\n"
"This is the lenth cut from the attack"))
        self.fk_leg_a_l.setText(_translate("smp_to_ds_ui", "Attack"))
        self.fk_leg_a_dsb.setToolTip(_translate("smp_to_ds_ui", "Attack in s\n"
"\n"
"This is the fade-in length for the legato, you should also modify the release of the attack ADSR settings so both work together"))
        self.fk_leg_a_curve_l.setText(_translate("smp_to_ds_ui", "Attack Curve"))
        self.fk_leg_a_curve_dsb.setToolTip(_translate("smp_to_ds_ui", "Attack Curve\n"
"(-100 log, 0 lin, 100 exp)"))
        self.fake_rls_cb.setToolTip(_translate("smp_to_ds_ui", "Create fake release trigger by re-using attack samples with a different envelope and some tweaks\n"
"\n"
"Typical result: a much shorter attenuated version of the samples with a heavy low pass filter will play when releasing keys\n"
"Great for keys, guitars..."))
        self.fake_rls_cb.setText(_translate("smp_to_ds_ui", "Add Fake Release"))
        self.fk_rls_mode_l.setText(_translate("smp_to_ds_ui", "Mode"))
        self.fk_rls_mode_cmb.setToolTip(_translate("smp_to_ds_ui", "Fake release mode\n"
"\n"
"\'start\'    Direct reuse of attack sample (default)\n"
"\'loop_end\'    Set start at loop_end (samples with tail after loop)\n"
"\'cue\'    Set start at cue marker"))
        self.fk_rls_mode_cmb.setItemText(0, _translate("smp_to_ds_ui", "start"))
        self.fk_rls_mode_cmb.setItemText(1, _translate("smp_to_ds_ui", "loop_end"))
        self.fk_rls_mode_cmb.setItemText(2, _translate("smp_to_ds_ui", "cue"))
        self.fk_volume_l.setText(_translate("smp_to_ds_ui", "Volume"))
        self.fk_volume_dsb.setToolTip(_translate("smp_to_ds_ui", "Fake Release Attenuation (dB)\n"
"\n"
"In many cases, the release sounds should be attenuated"))
        self.fk_tuning_l.setText(_translate("smp_to_ds_ui", "Tuning"))
        self.fk_tuning_dsb.setToolTip(_translate("smp_to_ds_ui", "Fake Release Tuning (semitones)\n"
"\n"
"Detune the release sounds from their original pitch"))
        self.fk_cutoff_l.setText(_translate("smp_to_ds_ui", "Cutoff"))
        self.fk_cutoff_dsb.setToolTip(_translate("smp_to_ds_ui", "Fake Release Low Pass Filter (Hz)\n"
"\n"
"In many case, release sounds sound \"muffled\", this can be simulated here with a simple filter"))
        self.fk_ADSR_pb.setToolTip(_translate("smp_to_ds_ui", "Fake release ADSR envelope (in s)\n"
"Click for context menu"))
        self.fk_ADSR_pb.setText(_translate("smp_to_ds_ui", "Fake ADSR"))
        self.fk_A_dsb.setToolTip(_translate("smp_to_ds_ui", "Attack in s"))
        self.fk_D_dsb.setToolTip(_translate("smp_to_ds_ui", "Decay in s"))
        self.fk_S_dsb.setToolTip(_translate("smp_to_ds_ui", "Sustain amplitude"))
        self.fk_R_dsb.setToolTip(_translate("smp_to_ds_ui", "Release in s"))
        self.fk_ADRr_pb.setToolTip(_translate("smp_to_ds_ui", "Fake release ADR Curve (-100 log, 0 lin, 100 exp)\n"
"Click for context menu"))
        self.fk_ADRr_pb.setText(_translate("smp_to_ds_ui", "Fake ADR Release"))
        self.fk_Ar_dsb.setToolTip(_translate("smp_to_ds_ui", "Attack Curve\n"
"(-100 log, 0 lin, 100 exp)"))
        self.fk_Dr_dsb.setToolTip(_translate("smp_to_ds_ui", "Decay Curve\n"
"(-100 log, 0 lin, 100 exp)"))
        self.fk_Rr_dsb.setToolTip(_translate("smp_to_ds_ui", "Release Curve\n"
"(-100 log, 0 lin, 100 exp)"))
        self.mapping_l.setText(_translate("smp_to_ds_ui", "Mapping"))
        self.notespread_l.setText(_translate("smp_to_ds_ui", "Note Spread"))
        self.spread_cmb.setToolTip(_translate("smp_to_ds_ui", "Note extension mode in relation with other notes\n"
"\n"
"\'up\'    extend to higher note\n"
"\'mid\'    (default) extend both ways\n"
"\'down\'    extend to lower note\n"
"\'none\'     No extension (drums,sfx)"))
        self.spread_cmb.setCurrentText(_translate("smp_to_ds_ui", "mid"))
        self.spread_cmb.setItemText(0, _translate("smp_to_ds_ui", "up"))
        self.spread_cmb.setItemText(1, _translate("smp_to_ds_ui", "mid"))
        self.spread_cmb.setItemText(2, _translate("smp_to_ds_ui", "down"))
        self.spread_cmb.setItemText(3, _translate("smp_to_ds_ui", "none"))
        self.pad_vel_cb.setToolTip(_translate("smp_to_ds_ui", "Re-use / clone samples from higher velocity layer to velocity layers with fewer notes\n"
"\n"
"Typical usage: instruments with velocity layers having a very different number of note samples\n"
"\n"
"- Avoid over-stretching zones in some circumstances\n"
"- May help with fake round-robins on lower velocities"))
        self.pad_vel_cb.setText(_translate("smp_to_ds_ui", "Pad Vel Layers"))
        self.seqmode_l.setText(_translate("smp_to_ds_ui", "Seq Mode"))
        self.seq_mode_cmb.setToolTip(_translate("smp_to_ds_ui", "Round-Robin mode"))
        self.seq_mode_cmb.setCurrentText(_translate("smp_to_ds_ui", "random"))
        self.seq_mode_cmb.setItemText(0, _translate("smp_to_ds_ui", "round_robin"))
        self.seq_mode_cmb.setItemText(1, _translate("smp_to_ds_ui", "random"))
        self.seq_mode_cmb.setItemText(2, _translate("smp_to_ds_ui", "true_random"))
        self.seq_mode_cmb.setItemText(3, _translate("smp_to_ds_ui", "always"))
        self.limit_pb.setToolTip(_translate("smp_to_ds_ui", "Limit note range to bounding samples or extend bounds\n"
"Click for context menu and some examples"))
        self.limit_pb.setText(_translate("smp_to_ds_ui", "Limit"))
        self.limit_le.setToolTip(_translate("smp_to_ds_ui", "Limit note range to bounding samples or extend bounds\n"
"\n"
"Enter 2 integer values separated by a space\n"
"Use - or + to offset from bounding notes\n"
"\n"
"\'auto\' sets bounds from average note gap\n"
"\'autox2\' doubles this gap"))
        self.note_limit_cmb.setToolTip(_translate("smp_to_ds_ui", "Note limit mode\n"
"\n"
"\'shared\' use all notes among all groups (default)\n"
"\'group\' consider only notes within the same group (typically organs with one group per stop)"))
        self.note_limit_cmb.setItemText(0, _translate("smp_to_ds_ui", "shared"))
        self.note_limit_cmb.setItemText(1, _translate("smp_to_ds_ui", "group"))
        self.fake_rr_pb.setToolTip(_translate("smp_to_ds_ui", "Fake Round-Robin offsets\n"
"Click for context menu and some examples"))
        self.fake_rr_pb.setText(_translate("smp_to_ds_ui", "Fake RR"))
        self.rrofs_le.setToolTip(_translate("smp_to_ds_ui", "Fake Round-Robin offsets\n"
"\n"
"Avoid the \"machine-gun effect\" plaguing a lot of sampled instruments\n"
"\n"
"Steal notes from neighboring samples to simulate Round-Robins\n"
"Enter integer values (sample index offset) separated by a space\n"
"A sufficient number of note samples is required for better results\n"
"\n"
"Leave a blank space to disable\n"
"\n"
"\'x3\' and \'x5\' for respectively 3 and 5 fake Round-Robins"))
        self.rr_bounds_cb.setToolTip(_translate("smp_to_ds_ui", "Make fake RR robin work even with bounding notes\n"
"by stealing notes further in reverse when reaching bounds\n"
"\n"
"If bounding notes sound too unnatural/pitched, disable the option"))
        self.rr_bounds_cb.setText(_translate("smp_to_ds_ui", "RR Bounds"))
        self.transpose_l.setText(_translate("smp_to_ds_ui", "Transpose"))
        self.transpose_sb.setToolTip(_translate("smp_to_ds_ui", "Transpose the whole sample mapping in semitones"))
        self.pf_mode_l.setText(_translate("smp_to_ds_ui", "Pitch Fraction Mode"))
        self.pf_mode_cmb.setToolTip(_translate("smp_to_ds_ui", "Control pitch fraction usage\n"
"Keep pitch fraction \"in check\" \n"
"\n"
"\'off\'    Ignore pitch fraction\n"
"\'on\'    Use pitch fraction\n"
"\'mean_scale\'    Scale deviation from mean to given value\n"
"\'mean_blend\'    Blend between mean and pitch fraction (0-100)\n"
"\'mean_threshold\'    Use  pitch fraction over threshold and mean under threshold\n"
"\'on_rand\'    Use and add given random\n"
"\'on_threshold\'    Use over given threshold\n"
"\'on_threshold_rand\'    Use over given threshold and add random"))
        self.pf_mode_cmb.setItemText(0, _translate("smp_to_ds_ui", "off"))
        self.pf_mode_cmb.setItemText(1, _translate("smp_to_ds_ui", "on"))
        self.pf_mode_cmb.setItemText(2, _translate("smp_to_ds_ui", "mean_scale"))
        self.pf_mode_cmb.setItemText(3, _translate("smp_to_ds_ui", "mean_blend"))
        self.pf_mode_cmb.setItemText(4, _translate("smp_to_ds_ui", "mean_threshold"))
        self.pf_mode_cmb.setItemText(5, _translate("smp_to_ds_ui", "on_rand"))
        self.pf_mode_cmb.setItemText(6, _translate("smp_to_ds_ui", "on_threshold"))
        self.pf_mode_cmb.setItemText(7, _translate("smp_to_ds_ui", "on_threshold_rand"))
        self.pf_th_dsb.setToolTip(_translate("smp_to_ds_ui", "Pitch fraction threshold/random factor in semitone cents"))
        self.tuning_l.setText(_translate("smp_to_ds_ui", "Tuning"))
        self.tuning_dsb.setToolTip(_translate("smp_to_ds_ui", "Fine tuning in semitones"))
        self.other_title_l.setText(_translate("smp_to_ds_ui", "Other options"))
        self.attenuation_l.setText(_translate("smp_to_ds_ui", "Attenuation"))
        self.attenuation_dsb.setToolTip(_translate("smp_to_ds_ui", "Volume attenuation to prevent saturation/clipping"))
        self.veltrk_l.setText(_translate("smp_to_ds_ui", "Velocity Track"))
        self.ampveltrk_dsb.setToolTip(_translate("smp_to_ds_ui", "Velocity Tracking Amplitude\n"
"Right click for context menu"))
        self.notepan_l.setText(_translate("smp_to_ds_ui", "Note Pan"))
        self.notepan_dsb.setToolTip(_translate("smp_to_ds_ui", "Auto pan sample from left to right depending on note number\n"
"Use negative value to invert the effect (right to left)\n"
"Right click for context menu"))
        self.crossfade_l.setText(_translate("smp_to_ds_ui", "Crossfade"))
        self.crossfade_cmb.setToolTip(_translate("smp_to_ds_ui", "Crossfade Mode"))
        self.crossfade_cmb.setItemText(0, _translate("smp_to_ds_ui", "off"))
        self.crossfade_cmb.setItemText(1, _translate("smp_to_ds_ui", "linear"))
        self.crossfade_cmb.setItemText(2, _translate("smp_to_ds_ui", "equal_power"))
        self.crossfade_dsb.setToolTip(_translate("smp_to_ds_ui", "Crossfade length as a percentage of loop length"))
        self.monophonic_cb.setToolTip(_translate("smp_to_ds_ui", "Make instrument monophonic at group level\n"
"(Bass, Wind instrument...)\n"
"When using legatos, the instrument will already be de facto monophonic"))
        self.monophonic_cb.setText(_translate("smp_to_ds_ui", "Monophonic"))
        self.instr_ui_title_l.setText(_translate("smp_to_ds_ui", "Instrument UI"))
        self.bg_text_l.setText(_translate("smp_to_ds_ui", "Background Text"))
        self.bg_text_cmb.setToolTip(_translate("smp_to_ds_ui", "Write text to the background image\n"
"none: No text\n"
"rootdir: Use root directory name as text (default)\n"
"custom: Type a custom text"))
        self.bg_text_cmb.setItemText(0, _translate("smp_to_ds_ui", "none"))
        self.bg_text_cmb.setItemText(1, _translate("smp_to_ds_ui", "root_dir"))
        self.bg_text_cmb.setItemText(2, _translate("smp_to_ds_ui", "custom"))
        self.bg_text_le.setPlaceholderText(_translate("smp_to_ds_ui", "Instrument Name"))
        self.palette_l.setText(_translate("smp_to_ds_ui", "Palette"))
        self.palette_cmb.setToolTip(_translate("smp_to_ds_ui", "Color Palette used to generate the DS Preset UI and its background image"))
        self.hsv_pb.setToolTip(_translate("smp_to_ds_ui", "Globally adjust chosen color palette"))
        self.hsv_pb.setText(_translate("smp_to_ds_ui", "HSV Adjust"))
        self.hue_dsb.setToolTip(_translate("smp_to_ds_ui", "Hue Shift"))
        self.sat_dsb.setToolTip(_translate("smp_to_ds_ui", "Saturation multiplier"))
        self.val_dsb.setToolTip(_translate("smp_to_ds_ui", "Value multiplier"))
        self.grp_knob_rows_l.setText(_translate("smp_to_ds_ui", "Group Knob Rows"))
        self.grp_knob_rows_sb.setToolTip(_translate("smp_to_ds_ui", "Transpose the whole sample mapping in semitones"))
        self.no_solo_grp_knob_cb.setToolTip(_translate("smp_to_ds_ui", "Don\'t create volume knob for instrument with only one group"))
        self.no_solo_grp_knob_cb.setText(_translate("smp_to_ds_ui", "No Solo Group Knob"))
        self.adsr_knobs_cb.setToolTip(_translate("smp_to_ds_ui", "Create ADSR knobs in UI"))
        self.adsr_knobs_cb.setText(_translate("smp_to_ds_ui", "ADSR Knobs"))
        self.max_adsr_value_l.setText(_translate("smp_to_ds_ui", "Max Value"))
        self.max_adsr_dsb.setToolTip(_translate("smp_to_ds_ui", "Max ADR value for ADSR knobs in UI"))
        self.use_reverb_cb.setToolTip(_translate("smp_to_ds_ui", "Create reverb knob"))
        self.use_reverb_cb.setText(_translate("smp_to_ds_ui", " Reverb"))
        self.reverb_wet_dsb.setToolTip(_translate("smp_to_ds_ui", "Default wet value for reverb"))
        self.use_ir_cb.setToolTip(_translate("smp_to_ds_ui", "Use or ignore IR samples\n"
"IR samples must be located in a separate subdirectory called \'IR\'"))
        self.use_ir_cb.setText(_translate("smp_to_ds_ui", "Use IR"))
        self.add_suffix_cb.setText(_translate("smp_to_ds_ui", "Add Suffix"))
        self.suffix_le.setToolTip(_translate("smp_to_ds_ui", "Add custom suffix to disambiguate a preset variant"))
        self.suffix_le.setPlaceholderText(_translate("smp_to_ds_ui", "_suffix"))
        self.auto_incr_cb.setToolTip(_translate("smp_to_ds_ui", "Auto increment to avoid overwriting"))
        self.auto_incr_cb.setText(_translate("smp_to_ds_ui", "Auto Increment"))
        self.create_dsp_pb.setToolTip(_translate("smp_to_ds_ui", "Create a dspreset file from input directory and current settings"))
        self.create_dsp_pb.setText(_translate("smp_to_ds_ui", "Create dspreset"))
        self.create_dslib_pb.setToolTip(_translate("smp_to_ds_ui", "Create dslibrary from root directory by archiving only required files\n"
"At least one valid dspreset must exist in the directory"))
        self.create_dslib_pb.setText(_translate("smp_to_ds_ui", "Create dslibrary"))
        self.settings_menu.setTitle(_translate("smp_to_ds_ui", "Settings"))
        self.actionSettings.setText(_translate("smp_to_ds_ui", "Settings"))
        self.save_settings_a.setText(_translate("smp_to_ds_ui", "Save settings"))
        self.load_settings_a.setText(_translate("smp_to_ds_ui", "Load settings"))
        self.restore_defaults_a.setText(_translate("smp_to_ds_ui", "Restore defaults"))
